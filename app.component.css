import { Component, OnInit, AfterViewInit } from '@angular/core';
import { Router } from '@angular/router';
import { ColDef, GridOptions } from 'ag-grid';
import { MatDialog, MatSnackBar } from '@angular/material';
import { RepricingService } from '../../../services/repricing.service';
import { FSC_Repricing_FX_Rate } from '../../../models/qrepricing';
import { UserStore } from '../../../stores/user.store';
import { FormBuilder, FormGroup, FormControl } from '@angular/forms';
import { ConfirmDialog } from '../../../validate/shared/dialogs/confirm-dialog.component';
import { DatePipe } from '@angular/common';

@Component({
    selector: 'app-qrepricing-fxrate-data',
    styleUrls: ['qrepricing-fxrate.component.css'],
    templateUrl: 'qrepricing-fxrate.component.html',
    providers: [RepricingService],
})
export class QRepricingfxrateComponent implements OnInit, AfterViewInit {
    public sync_msg: string;
    isLoading = false;
    selectedRow: FSC_Repricing_FX_Rate;
    gridOptions: GridOptions;
    columnDefs: ColDef[];
    rowData: FSC_Repricing_FX_Rate[] = [];
    returnData: FSC_Repricing_FX_Rate[] = [];
    ROMEReturnData: string[] = [];
    noDataOverlayText: string;
    loadingOverlayText: string;
    valuationDate: string;
    dataForm: FormGroup;
    FxSpotDate: Date;
    private gridApi: any;
    private gridColumnApi: any;
    runId: String;
    public fxDateSelected:string;
    constructor(
        private router: Router,
        public userStore: UserStore,
        private dialog: MatDialog,
        public snackBar: MatSnackBar,
        private repricingService: RepricingService,
        private datePipe: DatePipe,
        public formBuilder: FormBuilder


    ) {
        this.noDataOverlayText = '<span class="ag-overlay-no-rows-center">No data has been loaded yet</span>';
        this.loadingOverlayText = '<span class="ag-overlay-no-rows-center">Loading the relative message for this deal...</span>';

        {
            this.FxSpotDate = new Date();
          console.log("valuatiooooooooooo" + this.FxSpotDate);

          this.dataForm = formBuilder.group({
                'FxSpotDate': [this.datePipe.transform(this.FxSpotDate, 'yyyy-MM-dd')]
            });
            this.FxSpotDate.setDate(this.FxSpotDate.getDate());
            console.log("errrrr" + this.FxSpotDate.setDate(this.FxSpotDate.getDate()););

        }

        this.gridOptions = <GridOptions>{
            enableFilter: true,
            enableSorting: true,
            animateRows: true,
            enableColResize: true,
            suppressCellSelection: true,
            rowSelection: 'single',
            groupIncludeFooter: true,
            suppressAggFuncInHeader: true,
            headerHeight: 50,
            pagination: true,
            paginationPageSize: 2000,
            paginationAutoPageSize: false,
        };

        this.columnDefs = [
            { headerName: 'FX Date', field: 'currencyDate', width: 150 },
            { headerName: 'Currency ISO', field: 'currencyISO', width: 150 },
            { headerName: 'Currency Rate', field: 'currencyRate', width: 150 }
        ];
    }

    currencyFormatter(currency, sign) {
        if (currency === null || currency === undefined || currency === '') {
            return currency
        } else if (currency === 0) { return '$' + currency }
        else {
            var sansDec = parseFloat(currency).toFixed(2);
            var formatted = sansDec.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            return sign + formatted;
        }
    }

    onGeneralSearchChanged(val: string) {
        if (this.gridOptions && this.gridOptions.api) {
            this.gridOptions.api.setQuickFilter(val);
        }
    }

    onGridReady(params: any) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.setRowData(this.rowData);
    }
    orgValueChangeFxDate(value):void{
        this.fxDateSelected = this.datePipe.transform(value, 'yyyy-MM-dd');
    }

    DataParse(): void {
        if (this.returnData.length > 0) {
            console.log(this.returnData);
            this.returnData.forEach((row: FSC_Repricing_FX_Rate) => {
                let it = new FSC_Repricing_FX_Rate();
                it.currencyDate = row.id.currencyDate;
                it.currencyISO = row.id.currencyISO;
                it.currencyRate = row.currencyRate;
                this.rowData.push(it);
            });
        }
    }

    onDownloadButtonClicked() {
        this.gridOptions.api.exportDataAsCsv({
            fileName: `List of FX Rates`
        });
    }

    ngOnInit() {
        this.FxSpotDate = new Date();
        let runId = localStorage.getItem('trackingId');
        this.repricingService.getQRepricingFxrate(runId).subscribe(
            (data: FSC_Repricing_FX_Rate[]) => {
                this.returnData = data;
                console.log(this.returnData);
                this.DataParse();
                console.log(this.rowData);
            },
            () => { },
            () => {
                    if (this.gridApi)
                        this.gridApi.setRowData(this.rowData);
                    else
                        console.warn('gridApi is not ready!');
                }
        );
    }

    sync_investran() {
      //  const FxSpotDateInput = this.datePipe.transform(this.dataForm.get('FxSpotDate').value, 'yyyy-MM-dd');
       const FxSpotDateInput = this.fxDateSelected
        console.log(FxSpotDateInput);
        if (FxSpotDateInput == null) {
            this.snackBar.open('Please input date', 'OK', { panelClass: ['red-snackbar'] });
        } else if (FxSpotDateInput.toString() == 'Pick FX Date') {
            this.snackBar.open('Please input date', 'OK', { panelClass: ['red-snackbar'] });
        } else if (FxSpotDateInput.toString() == '') {
            this.snackBar.open('Please input date', 'OK', { panelClass: ['red-snackbar'] });
        }
        else {
            this.isLoading = false;
            this.dialog.open(ConfirmDialog, { data: { 'title': 'Confirm', 'body': 'Are you sure to synchronize from Investran now?<br>It will take a few moments.' } })
                .afterClosed()
                .subscribe(result => {
                    if (result) {
                        this.isLoading = true;
                        this.snackBar.open('Synchronizing ... please wait ...');

                        let runId = localStorage.getItem('trackingId');
                        this.repricingService.getFxRateFromROME(FxSpotDateInput.toString(), runId)
                            .subscribe(
                                (msg) => {
                                    this.sync_msg = 'Synchronization successed: ' + msg;
                                    this.snackBar.open(this.sync_msg, 'OK', { duration: 20000, panelClass: ['blue-snackbar'] });
                                    this.isLoading = false;
                                    this.rowData = [];
                                    this.repricingService.getQRepricingFxrate(runId).subscribe(
                                        (data: FSC_Repricing_FX_Rate[]) => {
                                            this.returnData = data;
                                            console.log(this.returnData);
                                            this.DataParse();
                                            console.log(this.rowData);
                                        },
                                        () => { },
                                        () => { this.gridApi.setRowData(this.rowData); }
                                    );
                                },
                                (err) => {
                                    this.sync_msg = 'An error happened while Investran Synchronization.' + err;
                                    this.snackBar.open(this.sync_msg, 'OK', { panelClass: ['red-snackbar'] });
                                    this.isLoading = false;
                                }
                            );
                    };
                }
                );
        };

    }

    ngAfterViewInit() {

    }


}
<div class="col-md-12" style="display: flex; align-items: center; margin-top: 10px; margin-bottom: 10px; width: 100%;">
    <mat-card style="width: 100%">
        <mat-card-content>
            <form style="display: flex; align-items: center;">
                <div class="row" style="justify-content: space-between; display: flex; flex-wrap: wrap;">
                        <div class="col-md-1" >
                            <mat-form-field class="custom-matform" style="width: 150px;">
                                <input matInput [matDatepicker]="picker" class="form-control" placeholder="Pick FX Date" formControlName="FxSpotDate"
                                placeholder="Pick FX Date" style="width: 250px;" (dateChange)="orgValueChangeFxDate($event.target.value)">
                                <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>    
                                <mat-datepicker #picker></mat-datepicker>
                            </mat-form-field>
                        </div>
                    
                    <div class="col-md-6">
                        <button style="margin-left: 10px; margin-top: 5px;" mat-raised-button (click)="sync_investran()"
                            [disabled]="isLoading">
                            Refresh FX from Investran
                        </button>
                        <div class="loading-shade" *ngIf="isLoading">
                            <mat-spinner mode="determinate" *ngIf="isLoading"></mat-spinner>
                        </div>
                    </div>
                </div>

            </form>
        </mat-card-content>
    </mat-card>
 
</div>
<div style="display: flex; flex-wrap:wrap; align-items: center; margin-top: 20px;">
    <button class="download-button"
            type="button"
            (click)="onDownloadButtonClicked()">Download Results</button>
    <div class="clickable-grid" style="width:100%; overflow-x:auto; box-shadow: 0px 2px 10px rgba(0, 0 ,0, 0.2);">
        <ag-grid-angular #agGrid style="width: 100%; height: 420px;" class="ag-theme-balham" [gridOptions]="gridOptions" [columnDefs]="columnDefs"
            [rowData]="rowData" rowHeight="25" [overlayNoRowsTemplate]="noDataOverlayText" [overlayLoadingTemplate]="loadingOverlayText"
            (gridReady)="onGridReady($event)">
        </ag-grid-angular>
    </div>   
</div>

